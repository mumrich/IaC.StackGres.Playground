// generated by cdktf get
// Invicton-Labs/shell-data/external
import { TerraformModule, TerraformModuleUserConfig } from 'cdktf';
import { Construct } from 'constructs';
export interface ShellConfig extends TerraformModuleUserConfig {
  /**
   * The command to run on creation when the module is used on a Unix machine. If not specified, will default to be the same as the `command_windows` variable.
   */
  readonly commandUnix?: string;
  /**
   * The command to run on creation when the module is used on a Windows machine. If not specified, will default to be the same as the `command_unix` variable.
   */
  readonly commandWindows?: string;
  /**
   * This input variable has the same function as the `depends_on` built-in variable, but has no restrictions on what kind of content it can contain.
   */
  readonly dynamicDependsOn?: any;
  /**
   * Map of environment variables to pass to the command.
   * @default [object Object]
   * The property type contains a map, they have special handling, please see {@link cdk.tf/module-map-inputs the docs}
   */
  readonly environment?: { [key: string]: string };
  /**
   * Map of sensitive environment variables to pass to the command. If any of these values are detected in the `stdout` or `stderr` outputs, they will be marked as sensitive. These keys/values will be merged with the `environment` input variable (this overwrites those values with the same key).
   * @default [object Object]
   * The property type contains a map, they have special handling, please see {@link cdk.tf/module-map-inputs the docs}
   */
  readonly environmentSensitive?: { [key: string]: string };
  /**
   * A unique ID for the shell execution. USED FOR DEVELOPMENT ONLY and will default to a UUID.
   */
  readonly executionId?: string;
  /**
   * Whether a Terraform error should be thrown if the command exits with a non-zero exit code. If true, nothing will be returned from this module and Terraform will fail the plan/apply. If false, the error message will be returned in `stderr` and the error code will be returned in `exit_code`.
   * @default true
   */
  readonly failOnNonzeroExitCode?: boolean;
  /**
   * Whether a Terraform error should be thrown if the command outputs anything to stderr. If true, nothing will be returned from this module and Terraform will fail the plan/apply. If false, the error message will be returned in `stderr` and the exit code will be returned in `exit_code`.
   */
  readonly failOnStderr?: boolean;
  /**
   * Whether a Terraform error should be thrown if the command times out. If true, nothing will be returned from this module and Terraform will fail the plan/apply. If false, any `stdout` and `stderr` output that was produced before timing out will be returned in their respective outputs, and the `exit_code` output will be `null`.
   * @default true
   */
  readonly failOnTimeout?: boolean;
  /**
   * Whether to force this module to wait for apply-time to execute the shell command. Otherwise, it will run during plan-time if possible (i.e. if all inputs are known during plan time).
   */
  readonly forceWaitForApply?: boolean;
  /**
   * Whether to suppress the Terraform console output (including plan content and shell execution status messages) for this module. If enabled, much of the content will be hidden by marking it as "sensitive".
   * @default true
   */
  readonly suppressConsole?: boolean;
  /**
   * The maximum number of seconds to allow the shell command to execute for  If it exceeds this timeout, it will be killed and will fail. Leave as the default (`null`) or set as 0 for no timeout.
   */
  readonly timeout?: number;
  /**
   * The interpreter to use when running commands on a Unix-based system. This is primarily used for testing, and should usually be left to the default value.
   * @default /bin/sh
   */
  readonly unixInterpreter?: string;
  /**
   * The working directory where command will be executed. Defaults to this module's install directory (usually somewhere in the `.terraform` directory).
   */
  readonly workingDir?: string;
}
/**
 * Defines an Shell based on a Terraform module
 *
 * Docs at Terraform Registry: {@link https://registry.terraform.io/modules/Invicton-Labs/shell-data/external/0.4.2 Invicton-Labs/shell-data/external}
 */
export class Shell extends TerraformModule {
  private readonly inputs: { [name: string]: any } = { }
  public constructor(scope: Construct, id: string, config: ShellConfig = {}) {
    super(scope, id, {
      ...config,
      source: 'Invicton-Labs/shell-data/external',
      version: '0.4.2',
    });
    this.commandUnix = config.commandUnix;
    this.commandWindows = config.commandWindows;
    this.dynamicDependsOn = config.dynamicDependsOn;
    this.environment = config.environment;
    this.environmentSensitive = config.environmentSensitive;
    this.executionId = config.executionId;
    this.failOnNonzeroExitCode = config.failOnNonzeroExitCode;
    this.failOnStderr = config.failOnStderr;
    this.failOnTimeout = config.failOnTimeout;
    this.forceWaitForApply = config.forceWaitForApply;
    this.suppressConsole = config.suppressConsole;
    this.timeout = config.timeout;
    this.unixInterpreter = config.unixInterpreter;
    this.workingDir = config.workingDir;
  }
  public get commandUnix(): string | undefined {
    return this.inputs['command_unix'] as string | undefined;
  }
  public set commandUnix(value: string | undefined) {
    this.inputs['command_unix'] = value;
  }
  public get commandWindows(): string | undefined {
    return this.inputs['command_windows'] as string | undefined;
  }
  public set commandWindows(value: string | undefined) {
    this.inputs['command_windows'] = value;
  }
  public get dynamicDependsOn(): any | undefined {
    return this.inputs['dynamic_depends_on'] as any | undefined;
  }
  public set dynamicDependsOn(value: any | undefined) {
    this.inputs['dynamic_depends_on'] = value;
  }
  public get environment(): { [key: string]: string } | undefined {
    return this.inputs['environment'] as { [key: string]: string } | undefined;
  }
  public set environment(value: { [key: string]: string } | undefined) {
    this.inputs['environment'] = value;
  }
  public get environmentSensitive(): { [key: string]: string } | undefined {
    return this.inputs['environment_sensitive'] as { [key: string]: string } | undefined;
  }
  public set environmentSensitive(value: { [key: string]: string } | undefined) {
    this.inputs['environment_sensitive'] = value;
  }
  public get executionId(): string | undefined {
    return this.inputs['execution_id'] as string | undefined;
  }
  public set executionId(value: string | undefined) {
    this.inputs['execution_id'] = value;
  }
  public get failOnNonzeroExitCode(): boolean | undefined {
    return this.inputs['fail_on_nonzero_exit_code'] as boolean | undefined;
  }
  public set failOnNonzeroExitCode(value: boolean | undefined) {
    this.inputs['fail_on_nonzero_exit_code'] = value;
  }
  public get failOnStderr(): boolean | undefined {
    return this.inputs['fail_on_stderr'] as boolean | undefined;
  }
  public set failOnStderr(value: boolean | undefined) {
    this.inputs['fail_on_stderr'] = value;
  }
  public get failOnTimeout(): boolean | undefined {
    return this.inputs['fail_on_timeout'] as boolean | undefined;
  }
  public set failOnTimeout(value: boolean | undefined) {
    this.inputs['fail_on_timeout'] = value;
  }
  public get forceWaitForApply(): boolean | undefined {
    return this.inputs['force_wait_for_apply'] as boolean | undefined;
  }
  public set forceWaitForApply(value: boolean | undefined) {
    this.inputs['force_wait_for_apply'] = value;
  }
  public get suppressConsole(): boolean | undefined {
    return this.inputs['suppress_console'] as boolean | undefined;
  }
  public set suppressConsole(value: boolean | undefined) {
    this.inputs['suppress_console'] = value;
  }
  public get timeout(): number | undefined {
    return this.inputs['timeout'] as number | undefined;
  }
  public set timeout(value: number | undefined) {
    this.inputs['timeout'] = value;
  }
  public get unixInterpreter(): string | undefined {
    return this.inputs['unix_interpreter'] as string | undefined;
  }
  public set unixInterpreter(value: string | undefined) {
    this.inputs['unix_interpreter'] = value;
  }
  public get workingDir(): string | undefined {
    return this.inputs['working_dir'] as string | undefined;
  }
  public set workingDir(value: string | undefined) {
    this.inputs['working_dir'] = value;
  }
  public get commandUnixOutput() {
    return this.getString('command_unix')
  }
  public get commandWindowsOutput() {
    return this.getString('command_windows')
  }
  public get dynamicDependsOnOutput() {
    return this.getString('dynamic_depends_on')
  }
  public get environmentOutput() {
    return this.getString('environment')
  }
  public get exitCodeOutput() {
    return this.getString('exit_code')
  }
  public get failOnNonzeroExitCodeOutput() {
    return this.getString('fail_on_nonzero_exit_code')
  }
  public get failOnStderrOutput() {
    return this.getString('fail_on_stderr')
  }
  public get failOnTimeoutOutput() {
    return this.getString('fail_on_timeout')
  }
  public get forceWaitForApplyOutput() {
    return this.getString('force_wait_for_apply')
  }
  public get nullCommandUnixOutput() {
    return this.getString('null_command_unix')
  }
  public get nullCommandWindowsOutput() {
    return this.getString('null_command_windows')
  }
  public get stderrOutput() {
    return this.getString('stderr')
  }
  public get stdoutOutput() {
    return this.getString('stdout')
  }
  public get timeoutOutput() {
    return this.getString('timeout')
  }
  public get unixInterpreterOutput() {
    return this.getString('unix_interpreter')
  }
  public get workingDirOutput() {
    return this.getString('working_dir')
  }
  protected synthesizeAttributes() {
    return this.inputs;
  }
}
