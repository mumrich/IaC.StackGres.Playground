// generated by cdktf get
// magnolia-sre/kubectl-cmd/kubernetes
import { TerraformModule, TerraformModuleUserConfig } from 'cdktf';
import { Construct } from 'constructs';
export interface KubectlCmdConfig extends TerraformModuleUserConfig {
  /**
   * @default true
   */
  readonly alwaysApply?: boolean;
  /**
   * The console-log output file names will use this app name variable. Ex. for `myapp`: cmd-myapp.log-0
   */
  readonly app: any;
  /**
   * Deprecated, please use the equivalent credentials.ca-certificate var. This will be removed soon!
   */
  readonly caCertificate?: any;
  /**
   * Name of the k8s cluster to connect to. Ex. for a k8s cluster named `my-cluster-has-a-very-long-and-complex-name` use: `my-cluster-has-a-very-long-and-complex-name`
   */
  readonly clusterName: any;
  /**
   * Command(s) which will ultimately contain a `kubectl` command execution
   */
  readonly cmds: string[];
  /**
   * Currently only supports token and kubeconfig-path
   * @default [object Object]
   */
  readonly credentials?: any;
  /**
   * Commands to execute during the destroy phase of the terraform module, using kubectl commands of course.
   * @default 
   */
  readonly destroyCmds?: string[];
  /**
   * Deprecated, please use the equivalent credentials.token.* var. This will be removed soon!
   */
  readonly endpoint?: any;
  /**
   * Provide a different than default ('/bin/bash') interpreter.
   * @default /bin/bash,-c
   */
  readonly interpreter?: any;
  /**
   * Deprecated, please use the equivalent credentials.token.* var. This will be removed soon!
   */
  readonly token?: any;
}
/**
 * Defines an KubectlCmd based on a Terraform module
 *
 * Docs at Terraform Registry: {@link https://registry.terraform.io/modules/magnolia-sre/kubectl-cmd/kubernetes/1.2.5 magnolia-sre/kubectl-cmd/kubernetes}
 */
export class KubectlCmd extends TerraformModule {
  private readonly inputs: { [name: string]: any } = { }
  public constructor(scope: Construct, id: string, config: KubectlCmdConfig) {
    super(scope, id, {
      ...config,
      source: 'magnolia-sre/kubectl-cmd/kubernetes',
      version: '1.2.5',
    });
    this.alwaysApply = config.alwaysApply;
    this.app = config.app;
    this.caCertificate = config.caCertificate;
    this.clusterName = config.clusterName;
    this.cmds = config.cmds;
    this.credentials = config.credentials;
    this.destroyCmds = config.destroyCmds;
    this.endpoint = config.endpoint;
    this.interpreter = config.interpreter;
    this.token = config.token;
  }
  public get alwaysApply(): boolean | undefined {
    return this.inputs['always-apply'] as boolean | undefined;
  }
  public set alwaysApply(value: boolean | undefined) {
    this.inputs['always-apply'] = value;
  }
  public get app(): any {
    return this.inputs['app'] as any;
  }
  public set app(value: any) {
    this.inputs['app'] = value;
  }
  public get caCertificate(): any | undefined {
    return this.inputs['ca-certificate'] as any | undefined;
  }
  public set caCertificate(value: any | undefined) {
    this.inputs['ca-certificate'] = value;
  }
  public get clusterName(): any {
    return this.inputs['cluster-name'] as any;
  }
  public set clusterName(value: any) {
    this.inputs['cluster-name'] = value;
  }
  public get cmds(): string[] {
    return this.inputs['cmds'] as string[];
  }
  public set cmds(value: string[]) {
    this.inputs['cmds'] = value;
  }
  public get credentials(): any | undefined {
    return this.inputs['credentials'] as any | undefined;
  }
  public set credentials(value: any | undefined) {
    this.inputs['credentials'] = value;
  }
  public get destroyCmds(): string[] | undefined {
    return this.inputs['destroy-cmds'] as string[] | undefined;
  }
  public set destroyCmds(value: string[] | undefined) {
    this.inputs['destroy-cmds'] = value;
  }
  public get endpoint(): any | undefined {
    return this.inputs['endpoint'] as any | undefined;
  }
  public set endpoint(value: any | undefined) {
    this.inputs['endpoint'] = value;
  }
  public get interpreter(): any | undefined {
    return this.inputs['interpreter'] as any | undefined;
  }
  public set interpreter(value: any | undefined) {
    this.inputs['interpreter'] = value;
  }
  public get token(): any | undefined {
    return this.inputs['token'] as any | undefined;
  }
  public set token(value: any | undefined) {
    this.inputs['token'] = value;
  }
  public get deprecationWarningOutput() {
    return this.getString('deprecation_warning')
  }
  public get logfileDestroyNameOutput() {
    return this.getString('logfile-destroy-name')
  }
  public get logfileNameOutput() {
    return this.getString('logfile-name')
  }
  protected synthesizeAttributes() {
    return this.inputs;
  }
}
